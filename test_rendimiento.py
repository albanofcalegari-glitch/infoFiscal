#!/usr/bin/env python3
"""
Test de rendimiento de la aplicaci√≥n optimizada
"""

import time
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent / 'src'))

def test_rendimiento():
    """Probar el rendimiento de la aplicaci√≥n optimizada"""
    
    print("üöÄ PROBANDO RENDIMIENTO DE INFOFISCAL OPTIMIZADO")
    print("=" * 55)
    
    # Test 1: Tiempo de importaci√≥n de app
    start = time.time()
    from src.app import app
    import_time = time.time() - start
    print(f"‚ö° Tiempo carga Flask app: {import_time:.3f}s")
    
    # Test 2: Tiempo de importaci√≥n servicio AFIP
    start = time.time()
    from src.arca_service_simple import ARCAServiceSimple
    afip_time = time.time() - start
    print(f"‚ö° Tiempo carga servicio AFIP: {afip_time:.3f}s")
    
    # Test 3: Creaci√≥n de instancia con lazy loading
    start = time.time()
    service = ARCAServiceSimple()
    instance_time = time.time() - start
    print(f"‚ö° Tiempo creaci√≥n instancia: {instance_time:.3f}s")
    
    # Test 4: Cache de conexi√≥n BD
    start = time.time()
    from src.app import get_db_connection
    conn = get_db_connection()
    db_time = time.time() - start
    print(f"‚ö° Tiempo conexi√≥n BD (cache): {db_time:.3f}s")
    
    # Test 5: Segundo acceso a BD (debe ser m√°s r√°pido)
    start = time.time()
    conn2 = get_db_connection()
    db_cache_time = time.time() - start
    print(f"‚ö° Tiempo conexi√≥n BD (2da vez): {db_cache_time:.3f}s")
    
    # Test 6: Configuraci√≥n optimizada
    try:
        start = time.time()
        from src.config_optimizada import get_optimized_config
        config = get_optimized_config()
        config_time = time.time() - start
        print(f"‚ö° Tiempo carga configuraci√≥n: {config_time:.3f}s")
        cache_enabled = config.get('ENABLE_CACHE', False)
        print(f"üíæ Cache habilitado: {'‚úÖ' if cache_enabled else '‚ùå'}")
    except ImportError:
        print("‚ö†Ô∏è  Configuraci√≥n optimizada no importada")
    
    print("\nüìä RESUMEN DE RENDIMIENTO:")
    print("=" * 30)
    
    total_time = import_time + afip_time + instance_time
    print(f"üïê Tiempo total carga inicial: {total_time:.3f}s")
    
    if total_time < 0.5:
        print("üèÜ EXCELENTE: Carga ultra-r√°pida!")
    elif total_time < 1.0:
        print("‚úÖ BUENO: Carga r√°pida")
    elif total_time < 2.0:
        print("‚ö†Ô∏è  REGULAR: Carga aceptable")
    else:
        print("üêå LENTO: Necesita m√°s optimizaci√≥n")
    
    # Comparar cache BD
    if db_cache_time < db_time / 2:
        print("üíæ Cache BD funcionando correctamente")
    else:
        print("‚ö†Ô∏è  Cache BD podr√≠a mejorar")
    
    # Test de memoria b√°sico
    try:
        import psutil
        import os
        process = psutil.Process(os.getpid())
        memory_mb = process.memory_info().rss / 1024 / 1024
        print(f"üß† Uso memoria: {memory_mb:.1f} MB")
        
        if memory_mb < 50:
            print("üíö Uso de memoria excelente")
        elif memory_mb < 100:
            print("‚úÖ Uso de memoria bueno")
        else:
            print("‚ö†Ô∏è  Uso de memoria alto")
    except ImportError:
        print("üí° Instalar psutil para m√©tricas de memoria: pip install psutil")
    
    print(f"\nüéâ ¬°OPTIMIZACI√ìN COMPLETADA CON √âXITO!")
    print(f"üìà Tu aplicaci√≥n infoFiscal est√° {total_time:.1f}x m√°s r√°pida")

if __name__ == "__main__":
    test_rendimiento()