"""
Script de optimizaci√≥n y limpieza para infoFiscal
Elimina archivos innecesarios y optimiza el proyecto
"""

import os
import shutil
from pathlib import Path

def limpiar_proyecto():
    """Eliminar archivos y directorios innecesarios"""
    
    base_dir = Path(__file__).parent
    
    # Archivos y directorios a eliminar
    archivos_eliminar = [
        # Cache de Python
        '__pycache__',
        '*.pyc',
        '*.pyo',
        '*.pyd',
        '.Python',
        
        # Archivos temporales
        '*.tmp',
        '*.temp',
        'temp_*',
        
        # Logs antiguos
        '*.log',
        '*.log.*',
        
        # Archivos de backup
        '*.bak',
        '*.backup',
        '*~',
        
        # Archivos de IDE
        '.vscode/settings.json.bak',
        '*.swp',
        '*.swo',
        
        # Archivos espec√≠ficos del proyecto que son duplicados o legacy
        'src/_deprecated_*',
    ]
    
    # Directorios a limpiar recursivamente
    directorios_limpiar = [
        base_dir / '__pycache__',
        base_dir / 'src' / '__pycache__',
        base_dir / 'debug_wsaa' / '*.debug_summary.txt',  # Mantener solo archivos esenciales
    ]
    
    archivos_eliminados = 0
    espacio_liberado = 0
    
    print("üßπ Iniciando limpieza del proyecto infoFiscal...")
    print("=" * 50)
    
    # Limpiar archivos por patr√≥n
    for patron in archivos_eliminar:
        if '*' in patron:
            # Es un patr√≥n, buscar archivos coincidentes
            import glob
            archivos_encontrados = glob.glob(str(base_dir / '**' / patron), recursive=True)
            for archivo in archivos_encontrados:
                try:
                    path_archivo = Path(archivo)
                    if path_archivo.is_file():
                        tama√±o = path_archivo.stat().st_size
                        path_archivo.unlink()
                        print(f"üóëÔ∏è  Eliminado: {path_archivo.name} ({tama√±o} bytes)")
                        archivos_eliminados += 1
                        espacio_liberado += tama√±o
                    elif path_archivo.is_dir():
                        shutil.rmtree(path_archivo)
                        print(f"üìÅ Eliminado directorio: {path_archivo.name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Error eliminando {archivo}: {e}")
        else:
            # Es un archivo o directorio espec√≠fico
            path_item = base_dir / patron
            try:
                if path_item.exists():
                    if path_item.is_file():
                        tama√±o = path_item.stat().st_size
                        path_item.unlink()
                        print(f"üóëÔ∏è  Eliminado: {patron} ({tama√±o} bytes)")
                        archivos_eliminados += 1
                        espacio_liberado += tama√±o
                    elif path_item.is_dir():
                        shutil.rmtree(path_item)
                        print(f"üìÅ Eliminado directorio: {patron}")
            except Exception as e:
                print(f"‚ö†Ô∏è  Error eliminando {patron}: {e}")
    
    # Limpiar directorios espec√≠ficos
    debug_dir = base_dir / 'debug_wsaa'
    if debug_dir.exists():
        archivos_debug = list(debug_dir.glob('*.debug_summary.txt'))
        archivos_debug.extend(list(debug_dir.glob('*.decode_error.txt')))
        
        for archivo in archivos_debug:
            try:
                tama√±o = archivo.stat().st_size
                archivo.unlink()
                print(f"üóëÔ∏è  Debug limpiado: {archivo.name} ({tama√±o} bytes)")
                archivos_eliminados += 1
                espacio_liberado += tama√±o
            except Exception as e:
                print(f"‚ö†Ô∏è  Error limpiando debug {archivo}: {e}")
    
    print("\n" + "=" * 50)
    print(f"‚úÖ Limpieza completada:")
    print(f"   üìÅ Archivos eliminados: {archivos_eliminados}")
    print(f"   üíæ Espacio liberado: {espacio_liberado:,} bytes ({espacio_liberado/1024:.1f} KB)")
    
    return archivos_eliminados, espacio_liberado

def optimizar_estructura():
    """Optimizar la estructura de archivos del proyecto"""
    
    base_dir = Path(__file__).parent
    
    print("\nüîß Optimizando estructura del proyecto...")
    print("=" * 50)
    
    optimizaciones = []
    
    # Verificar si existe el archivo optimizado y sugerir reemplazo
    archivo_original = base_dir / 'src' / 'arca_service_simple.py'
    archivo_optimizado = base_dir / 'src' / 'arca_service_optimized.py'
    
    if archivo_optimizado.exists() and archivo_original.exists():
        tama√±o_original = archivo_original.stat().st_size
        tama√±o_optimizado = archivo_optimizado.stat().st_size
        
        print(f"üìä arca_service_simple.py: {tama√±o_original:,} bytes")
        print(f"üìä arca_service_optimized.py: {tama√±o_optimizado:,} bytes")
        
        if tama√±o_optimizado < tama√±o_original:
            ahorro = tama√±o_original - tama√±o_optimizado
            print(f"üí° Potencial ahorro: {ahorro:,} bytes ({ahorro/1024:.1f} KB)")
            optimizaciones.append(f"Reemplazar servicio AFIP (ahorro: {ahorro/1024:.1f} KB)")
    
    # Verificar monitor optimizado
    monitor_original = base_dir / 'monitor_afip.py'
    monitor_optimizado = base_dir / 'monitor_afip_optimized.py'
    
    if monitor_optimizado.exists() and monitor_original.exists():
        tama√±o_original = monitor_original.stat().st_size
        tama√±o_optimizado = monitor_optimizado.stat().st_size
        
        if tama√±o_optimizado <= tama√±o_original:  # Permitir igual tama√±o si est√° optimizado
            print(f"üìä Monitor AFIP optimizado disponible")
            optimizaciones.append("Monitor AFIP con lazy loading")
    
    # Verificar archivos de configuraci√≥n
    config_optimizada = base_dir / 'src' / 'config_optimizada.py'
    if config_optimizada.exists():
        print(f"üìä Configuraci√≥n optimizada disponible")
        optimizaciones.append("Configuraci√≥n de rendimiento centralizada")
    
    if optimizaciones:
        print(f"‚úÖ Optimizaciones disponibles:")
        for opt in optimizaciones:
            print(f"   ‚úì {opt}")
    else:
        print("‚ÑπÔ∏è  No se encontraron optimizaciones adicionales")
    
    return len(optimizaciones)

def generar_reporte_proyecto():
    """Generar reporte del estado del proyecto"""
    
    base_dir = Path(__file__).parent
    
    print(f"\nüìã Reporte del proyecto infoFiscal")
    print("=" * 50)
    
    # Contar archivos por tipo
    archivos_python = list(base_dir.glob('**/*.py'))
    archivos_html = list(base_dir.glob('**/*.html'))
    archivos_css = list(base_dir.glob('**/*.css'))
    archivos_txt = list(base_dir.glob('**/*.txt'))
    archivos_md = list(base_dir.glob('**/*.md'))
    
    # Calcular tama√±os
    tama√±o_python = sum(f.stat().st_size for f in archivos_python)
    tama√±o_html = sum(f.stat().st_size for f in archivos_html)
    tama√±o_css = sum(f.stat().st_size for f in archivos_css)
    tama√±o_total = tama√±o_python + tama√±o_html + tama√±o_css
    
    print(f"üìÑ Archivos Python: {len(archivos_python)} ({tama√±o_python/1024:.1f} KB)")
    print(f"üåê Archivos HTML: {len(archivos_html)} ({tama√±o_html/1024:.1f} KB)")
    print(f"üé® Archivos CSS: {len(archivos_css)} ({tama√±o_css/1024:.1f} KB)")
    print(f"üìù Archivos documentaci√≥n: {len(archivos_txt + archivos_md)}")
    print(f"üì¶ Tama√±o total c√≥digo: {tama√±o_total/1024:.1f} KB")
    
    # Verificar optimizaciones aplicadas
    optimizaciones_detectadas = []
    
    if (base_dir / 'src' / 'config_optimizada.py').exists():
        optimizaciones_detectadas.append("‚úÖ Configuraci√≥n optimizada")
    
    if any('lazy' in f.read_text(encoding='utf-8').lower() for f in archivos_python[:3]):
        optimizaciones_detectadas.append("‚úÖ Lazy loading implementado")
    
    requirements_file = base_dir / 'requirements.txt'
    if requirements_file.exists():
        content = requirements_file.read_text(encoding='utf-8')
        if len(content.split('\\n')) < 10:  # Pocas dependencias
            optimizaciones_detectadas.append("‚úÖ Dependencias minimizadas")
    
    print(f"\\nüöÄ Optimizaciones detectadas: {len(optimizaciones_detectadas)}")
    for opt in optimizaciones_detectadas:
        print(f"   {opt}")
    
    return {
        'archivos_python': len(archivos_python),
        'archivos_html': len(archivos_html),
        'tama√±o_total_kb': tama√±o_total/1024,
        'optimizaciones': len(optimizaciones_detectadas)
    }

def main():
    """Funci√≥n principal del script de optimizaci√≥n"""
    
    print("üöÄ OPTIMIZADOR INFOFISCAL")
    print("========================")
    print("Este script optimiza el proyecto para mejor rendimiento\\n")
    
    # Paso 1: Limpieza
    archivos_eliminados, espacio_liberado = limpiar_proyecto()
    
    # Paso 2: Optimizaci√≥n de estructura
    optimizaciones_disponibles = optimizar_estructura()
    
    # Paso 3: Reporte final
    reporte = generar_reporte_proyecto()
    
    # Resumen final
    print(f"\\nüéØ RESUMEN DE OPTIMIZACI√ìN")
    print("=" * 50)
    print(f"üóëÔ∏è  Archivos limpiados: {archivos_eliminados}")
    print(f"üíæ Espacio liberado: {espacio_liberado/1024:.1f} KB")
    print(f"üîß Optimizaciones disponibles: {optimizaciones_disponibles}")
    print(f"üì¶ Tama√±o final del proyecto: {reporte['tama√±o_total_kb']:.1f} KB")
    
    # Recomendaciones
    print(f"\\nüí° RECOMENDACIONES:")
    
    if reporte['tama√±o_total_kb'] > 500:
        print("   ‚ö†Ô∏è  El proyecto sigue siendo grande. Considera usar archivos optimizados.")
    else:
        print("   ‚úÖ Tama√±o del proyecto optimizado correctamente.")
    
    if reporte['optimizaciones'] >= 3:
        print("   ‚úÖ Buen nivel de optimizaciones aplicadas.")
    else:
        print("   üí° Puedes aplicar m√°s optimizaciones usando los archivos *_optimized.py")
    
    print(f"\\nüèÅ Optimizaci√≥n completada. ¬°Tu proyecto infoFiscal est√° m√°s ligero!")

if __name__ == "__main__":
    main()